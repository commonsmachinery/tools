# -*- python -*-
# ex: set syntax=python:

import os

# HTTPS git access works better in a docker-based slave
CATALOG_GIT_URL = 'https://github.com/commonsmachinery/catalog.git'

IRC_CHANNEL = os.getenv('BUILD_IRC_CHANNEL')


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("catalog-slave", "cm-build")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        repourl=CATALOG_GIT_URL,
        project='catalog'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler, FixedParameter
from buildbot.changes import filter
c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
        name="ci-catalog",
        change_filter=filter.ChangeFilter(project='catalog', branch='master'),
        treeStableTimer=120,
        builderNames=["ci-catalog"]))

c['schedulers'].append(Nightly(
        name="nightly-catalog",
        hour=1,
        minute=45,

        branch='master',
        change_filter=filter.ChangeFilter(project='catalog', branch='master'),
        onlyIfChanged=True,

        builderNames=["full-catalog"]))

c['schedulers'].append(ForceScheduler(
        name="force-catalog",
        builderNames=["full-catalog"],

        revision=FixedParameter(name="revision", default=""),
        repository=FixedParameter(name="repository", default=""),
        project=FixedParameter(name="project", default="catalog"),
        branch=FixedParameter(name="branch", default="master"),
        properties = [],
        ))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

#
# Catalog builders
#

catalog_common_steps = [
    # Setup dev env
    ShellCommand(
        command='./setup_devenv.sh',
        description=['installing', 'dependencies'],
        descriptionDone=['installed', 'dependencies'],
        haltOnFailure=True,
        logEnviron=False),

    # Test frontend
    ShellCommand(
        workdir='build/frontend',
        command=['make', 'lint'],
        logEnviron=False),

# ShellCommand(
#         workdir='build/frontend',
#         command=['make', 'test'],
#         logEnviron=False),

    # Test backend
    ShellCommand(
        workdir='build/backend',
        command=['../build/backend/bin/py.test'],
        logEnviron=False),
    ]


# On new commits we just update and use whatever is present
ci_catalog = BuildFactory(
    [ Git(repourl=CATALOG_GIT_URL, mode='incremental', logEnviron=False),
      ] + catalog_common_steps
    )

# But forced builds (and perhaps nightly) should start from scratch
# to ensure that all dependencies are listed
full_catalog = BuildFactory(
    [ Git(repourl=CATALOG_GIT_URL, logEnviron=False,
          mode='full', method='clobber', shallow=True),
      ] + catalog_common_steps
    )


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="ci-catalog",
      slavenames=["catalog-slave"],
      factory=ci_catalog))

c['builders'].append(
    BuilderConfig(name="full-catalog",
      slavenames=["catalog-slave"],
      factory=full_catalog))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("cmbb","humphreyTin")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8089, authz=authz_cfg))

if IRC_CHANNEL:
    from buildbot.status import words
    irc = words.IRC("chat.freenode.net",
                    "cm-build",
                    password=None,

                    channels=[IRC_CHANNEL],
                    pm_to_nicks=[],

                    allowForce=False,
                    allowShutdown=False,
                    noticeOnChannel=False,

                    showBlameList=True,
                    useRevisions=False,
                    useColors=True,

                    notify_events={
                      'exception': 1,
                      'finished': 1,
                      #'successToFailure': 1,
                      #'failureToSuccess': 1,
                    })
    c['status'].append(irc)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Commons Machinery"
c['titleURL'] = "https://github.com/commonsmachinery"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://labs.commonsmachinery.se:8089/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
